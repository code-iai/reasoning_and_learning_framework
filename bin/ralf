#! /usr/bin/env python
import rospy
import actionlib
import reasoning_and_learning_framework.msg
from json_prolog_msgs.srv import *

from query.query import Query
from ralf import ralf

# create messages that are used to publish feedback/result

SERVICE_NAME_SIMPLE_QUERY_ID = 'ralf/simple_query'
SERVICE_NAME_SOLUTION = 'ralf/next_solution'
SERVICE_NAME_FINISH = 'ralf/finish'
NODE_NAME = 'ralf'

service_query_id = None
service_query_solution = None
service_query_finish = None

queries = {}

#rosservice.get_service_list()


class RalfAction(object):
    # create messages that are used to publish feedback/result
    _feedback = reasoning_and_learning_framework.msg.RalfFeedback()
    _result = reasoning_and_learning_framework.msg.RalfResult()

    # --------------------------------------------------------------#
    def __init__(self, name):
        self._action_name = name
        self._as = actionlib.SimpleActionServer(self._action_name, reasoning_and_learning_framework.msg.RalfAction,
                                                execute_cb=self.execute_cb, auto_start=False)
        self._as.start()

    def execute_cb(self, goal):
        # helper variables
        r = rospy.Rate(1)
        success = True

        # The message has to be defined in RalfFeedback.py to print a string stating that ralf is executing smoothly

        self._feedback.message = {}

        # publish info to the console for the user
        rospy.loginfo('%s: Executing, creating goal of order %i' % (self._action_name, goal.order))

        # start executing the action
        for i in range(1, goal.order):
            # check that preempt has not been requested by the client
            if self._as.is_preempt_requested():
                rospy.loginfo('%s: Preempted' % self._action_name)
                self._as.set_preempted()
                success = False
                break
            self._feedback.message
            # publish the feedback
            self._as.publish_feedback(self._feedback)
            # this step is not necessary, the sequence is computed at 1 Hz for demonstration purposes
            r.sleep()

        if success:
            self._result.sequence = self._feedback.sequence
            rospy.loginfo('%s: Succeeded' % self._action_name)
            self._as.set_succeeded(self._result)


    # -----------------------------------------------------------------#

    def call_service_query_id(req):
        query = Query(req.id, req.mode, req.query)
        queries[query.id] = query

        print query._query_text

        # The MLN inference causes that the service dies sometimes without throwing an exception.
        # However until the real cause will be found out, a reboot of the service fixes it.
        # if __is_service_running__():     # __is_action_running__
        #     try:
        #         __start_service__()
        #     except Exception as inst:
        #         print inst
        #
        # return PrologQueryResponse(True, '')

    def call_service_query_solution(req):
        query = queries.get(req.id, None)
        answer = ralf.answer_query(query)
        print answer
        return PrologNextSolutionResponse(3, answer)
        # print answerP
        # The MLN inference causes that the service dies sometimes without throwing an exception.
        # However until the real cause will be found out, a reboot of the service fixes it.
    #     if __is_service_running__():
    #         try:
    #             __start_service__()
    #         except Exception as inst:
    #             print inst
    #
    #     print answer
    #     return PrologNextSolutionResponse(3, answer)
    #
    # def call_service_query_finish(req):
    #     if __is_service_running__():
    #         try:
    #             __start_service__()
    #         except Exception as inst:
    #             print inst
    #     return PrologQueryResponse()


# def __is_service_running__():
#     return '/{}'.format(SERVICE_NAME_SIMPLE_QUERY_ID) not in rosservice.get_service_list() \
#            or '/{}'.format(SERVICE_NAME_SOLUTION) not in rosservice.get_service_list() \
#            or '/{}'.format(SERVICE_NAME_FINISH) not in rosservice.get_service_list()


# def __start_service__():
#     print 'Starting services ..'
#     if '/{}'.format(SERVICE_NAME_SIMPLE_QUERY_ID) not in rosservice.get_service_list():
#         global service_query_id
#         service_query_id = rospy.Service(SERVICE_NAME_SIMPLE_QUERY_ID, PrologQuery, myobjx.call_service_query_id())
#
#     if '/{}'.format(SERVICE_NAME_SOLUTION) not in rosservice.get_service_list():
#         global service_query_solution
#         service_query_id = rospy.Service(SERVICE_NAME_SOLUTION, PrologNextSolution,
#                                          myobjx.call_service_query_solution())
#
#     if '/{}'.format(SERVICE_NAME_FINISH) not in rosservice.get_service_list():
#         global service_query_finish
#         service_query_finish = rospy.Service(SERVICE_NAME_FINISH, PrologFinish, myobjx.call_service_query_finish())


#myobjx = RalfAction()


def start_ralf_server():
    rospy.init_node(NODE_NAME)
   # myobjx.__start_service__()
    print "Waiting for questions"


if __name__ == '__main__':
    start_ralf_server()

    server = RalfAction(rospy.get_name())
    rospy.spin()
