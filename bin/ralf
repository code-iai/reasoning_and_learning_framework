#! /usr/bin/env python
import rosservice
import rospy
from reasoning_and_learning_framework_msgs.srv import *
from json_prolog_msgs.srv import *

from query.query import Query
from ralf import ralf

SERVICE_NAME_QUERY_ID = 'json_prolog/simple_query'
SERVICE_NAME_SOLUTION = 'json_prolog/next_solution'
NODE_NAME = 'ralf'

service_query_id = None
service_query_solution = None

queries = {}


def call_service_query_id(req):
    query = Query(req.id, req.mode, req.query)
    queries[query.id] = query

    # The MLN inference causes that the service dies sometimes without throwing an exception.
    # However until the real cause will be found out, a reboot of the service fixes it.
    if __is_service_running__():
        try:
            __start_service__()
        except:
            print''

    return PrologQueryResponse(True, '')


def call_service_query_solution(req):
    query = queries.get(req.id, None)

    answer = ralf.answer_query(query)

    # The MLN inference causes that the service dies sometimes without throwing an exception.
    # However until the real cause will be found out, a reboot of the service fixes it.
    if __is_service_running__():
        try:
            __start_service__()
        except:
            print''

    return PrologNextSolutionResponse(3, answer)


def __is_service_running__():
    return '/{}'.format(SERVICE_NAME_QUERY_ID) not in rosservice.get_service_list() \
           or '/{}'.format(SERVICE_NAME_SOLUTION) not in rosservice.get_service_list()


def __start_service__():
    global service_query_id
    service_query_id = rospy.Service(SERVICE_NAME_QUERY_ID, PrologQuery, call_service_query_id)

    global service_query_solution
    service_query_id = rospy.Service(SERVICE_NAME_SOLUTION, PrologNextSolution, call_service_query_solution)


def start_ralf_server():
    rospy.init_node(NODE_NAME)
    __start_service__()
    print "Waiting for questions"
    rospy.spin()
    

if __name__ == '__main__':
    start_ralf_server()




